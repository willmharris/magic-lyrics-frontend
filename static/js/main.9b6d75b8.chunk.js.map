{"version":3,"sources":["Components/Login.js","Components/Player.js","Components/Search.js","Components/Routing.js","App.js","serviceWorker.js","index.js"],"names":["loginLink","join","Login","Grid","style","backgroundImage","Column","paddingTop","Row","paddingLeft","fontSize","Button","href","Player","playPause","event","fetch","target","id","method","headers","props","accessToken","previousNext","state","songData","lyrics","songURL","setInterval","then","resp","json","data","setState","item","name","artists","songUrl","this","columns","src","album","images","url","maxHeight","maxWidth","marginTop","onClick","lineHeight","className","window","location","hash","refresh","Component","Search","console","log","Routing","substring","exact","path","render","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sVAYMA,EAAS,UARM,yCAQN,sBAPE,mCAOF,yBANK,+BAML,kBALA,CACb,8BACA,2BACA,8BAEkGC,KAAK,OAA1F,yCAoBAC,MAhBf,WAEI,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,gBAAgB,OAAD,OAL1B,6HAK0B,OACzB,kBAACF,EAAA,EAAKG,OAAN,CAAaF,MAAO,CAACG,WAAY,MAC7B,kBAACJ,EAAA,EAAKK,IAAN,CAAUJ,MAAQ,CAACK,YAAa,IAAKF,WAAY,IAAKG,SAAU,KAAhE,2BACA,kBAACP,EAAA,EAAKK,IAAN,CAAUJ,MAAO,CAACK,YAAa,IAAKF,WAAY,IAAKG,SAAU,KAA/D,4BACA,kBAACP,EAAA,EAAKK,IAAN,CAAUJ,MAAO,CAACK,YAAa,IAAKF,WAAY,MAC5C,kBAACI,EAAA,EAAD,CAAQC,KAAMZ,EAAWI,MAAO,CAACM,SAAU,KAA3C,qBAEJ,kBAACP,EAAA,EAAKK,IAAN,CAAUJ,MAAO,CAAEG,WAAY,UCoEhCM,E,kDAvFX,aAAe,IAAD,8BACV,gBAQJC,UAAY,SAACC,GACTC,MAAM,wCAAD,OAAyCD,EAAME,OAAOC,IAAM,CAC/DC,OAAQ,MACRC,QAAS,CACP,cAAiB,UAAY,EAAKC,MAAMC,gBAblC,EAkBdC,aAAe,SAACR,GACZC,MAAM,wCAAD,OAAyCD,EAAME,OAAOC,IAAM,CAC/DC,OAAQ,OACRC,QAAS,CACP,cAAiB,UAAY,EAAKC,MAAMC,gBApB5C,EAAKE,MAAQ,CACTC,SAAU,KACVC,OAAQ,KACRC,QAAS,MALH,E,sDA2BH,IAAD,OACNC,aAAa,WACLZ,MAAM,uCAAwC,CAC1CI,QAAS,CAAC,cAAiB,UAAY,EAAKC,MAAMC,eACnDO,MACC,SAAAC,GAAI,OAAIA,EAAKC,UACfF,MACE,SAAAG,GAAS,EAAKC,SAAS,CAACR,SAAUO,OACpCH,MAAK,kBAAMb,MAAM,0DAAD,OAA2D,EAAKQ,MAAMC,SAASS,KAAKC,KAApF,mBAAmG,EAAKX,MAAMC,SAASS,KAAKE,QAAQ,GAAGD,UAASN,MAC9J,SAAAC,GAAI,OAAIA,EAAKC,UACfF,MACE,SAAAG,GACI,EAAKC,SAAS,CAACP,OAAQM,EAAI,OAAYK,QAASL,EAAI,eAIhE,O,+BAKJ,OACI,6BACKM,KAAKd,MAAMC,SACR,kBAACtB,EAAA,EAAD,CAAMoC,QAAS,EAAGnC,MAAO,CAACC,gBAAgB,OAAD,OAvDlD,6HAuDkD,OACrC,kBAACF,EAAA,EAAKG,OAAN,CAAaF,MAAO,CAACM,SAAU,KAC3B,kBAACP,EAAA,EAAKK,IAAN,KACI,yBAAKgC,IAAKF,KAAKd,MAAMC,SAASS,KAAKO,MAAMC,OAAO,GAAGC,IAAKvC,MAAO,CAACwC,UAAW,IAAKC,SAAU,QAE9F,kBAAC1C,EAAA,EAAKK,IAAN,CAAUJ,MAAO,CAAC0C,UAAW,KAA7B,SACWR,KAAKd,MAAMC,SAASS,KAAKC,MAEpC,kBAAChC,EAAA,EAAKK,IAAN,CAAUJ,MAAO,CAAC0C,UAAW,KAA7B,WACaR,KAAKd,MAAMC,SAASS,KAAKE,QAAQ,GAAGD,MAEjD,kBAAChC,EAAA,EAAKK,IAAN,CAAUJ,MAAO,CAAC0C,UAAW,KACzB,kBAACnC,EAAA,EAAD,CAAQoC,QAAST,KAAKf,aAAcL,GAAG,YAAvC,YACA,kBAACP,EAAA,EAAD,CAAQoC,QAAST,KAAKxB,UAAYI,GAAG,QAArC,QACA,kBAACP,EAAA,EAAD,CAAQoC,QAAST,KAAKxB,UAAYI,GAAG,SAArC,SACA,kBAACP,EAAA,EAAD,CAAQoC,QAAST,KAAKf,aAAcL,GAAG,QAAvC,UAGR,kBAACf,EAAA,EAAKG,OAAN,CAAaF,MAAO,CAACM,SAAU,GAAIsC,WAAY,MACvC,yBAAKC,UAAU,gBAAgBX,KAAKd,MAAME,UAItD,Q,0CAOZwB,OAAOC,SAASC,KAAO,GACvBd,KAAKe,c,GApFQC,aCqBNC,E,wKArBP3B,aACI,WACI4B,QAAQC,IAAI,UAEhB,O,+BAKJ,OACI,6BACI,0C,0CAMRnB,KAAKe,c,GApBQC,aCyBNI,E,kDAnBX,aAAe,IAAD,8BACV,gBACKlC,MAAQ,CACTF,YAAa4B,OAAOC,SAASC,KAAKO,UAAU,KAHtC,E,qDAOJ,IAAD,OACL,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,yBAAyBC,OAAQ,kBAAM,kBAAC,EAAD,SACzD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,CAAQxC,YAAa,EAAKE,MAAMF,iBAC1E,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,c,GAfpCR,aCMPS,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2D,OCXNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.9b6d75b8.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Grid } from 'semantic-ui-react'\n\n\nconst authEndpoint = 'https://accounts.spotify.com/authorize'\nconst clientId = \"8836102077dc476b87b683e9fbcd411a\"\nconst redirectUri = \"http://localhost:3000/player\"\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\"\n]\nconst loginLink = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`\n\nconst bg = \"https://sheffieldsolidsurfaces.b-cdn.net/wp-content/uploads/sites/3/2019/02/b0da5f_1dec43baa7e544a986e5b77576b4b4dfmv2.jpg\"\n\nfunction Login() {\n\n    return(\n        <Grid style={{backgroundImage: `url(${bg})`}}>\n            <Grid.Column style={{paddingTop: 100}}>\n                <Grid.Row style ={{paddingLeft: 375, paddingTop: 100, fontSize: 60}}>Welcome to Magic Lyrics</Grid.Row>\n                <Grid.Row style={{paddingLeft: 475, paddingTop: 100, fontSize: 40}}>Spotify lyrics made easy</Grid.Row>\n                <Grid.Row style={{paddingLeft: 515, paddingTop: 100}}>\n                    <Button href={loginLink} style={{fontSize: 35}}>Login to Spotify</Button>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: 325}}></Grid.Row>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default Login","import React, {Component} from 'react'\nimport { Button, Grid } from 'semantic-ui-react'\n\nconst bg = \"https://sheffieldsolidsurfaces.b-cdn.net/wp-content/uploads/sites/3/2019/02/b0da5f_1dec43baa7e544a986e5b77576b4b4dfmv2.jpg\"\n\nclass Player extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            songData: null,\n            lyrics: null,\n            songURL: null\n        }\n    }\n\n    playPause = (event) => {\n        fetch(`https://api.spotify.com/v1/me/player/${event.target.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Authorization\": \"Bearer \" + this.props.accessToken\n          }\n        })\n      }\n    \n    previousNext = (event) => {\n        fetch(`https://api.spotify.com/v1/me/player/${event.target.id}`, {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": \"Bearer \" + this.props.accessToken\n          }\n        })\n    }\n\n    refresh() {\n        setInterval( () => {\n                fetch(\"https://api.spotify.com/v1/me/player\", {\n                    headers: {\"Authorization\": \"Bearer \" + this.props.accessToken}\n                }).then(\n                    resp => resp.json()\n                ).then(\n                    data => {this.setState({songData: data})}\n                ).then(() => fetch(`https://magic-lyrics-backend.herokuapp.com/lyrics?song=${this.state.songData.item.name}&artist=${this.state.songData.item.artists[0].name}`)).then(\n                    resp => resp.json()\n                ).then(\n                    data => {\n                        this.setState({lyrics: data[\"lyrics\"], songUrl: data[\"website\"]})\n                    }\n                )\n            }, \n            1000\n        )\n    }\n    \n    render() {\n        return(\n            <div>\n                {this.state.songData ?\n                    <Grid columns={2} style={{backgroundImage: `url(${bg})`}}>\n                        <Grid.Column style={{fontSize: 25}}>\n                            <Grid.Row>\n                                <img src={this.state.songData.item.album.images[0].url} style={{maxHeight: 550, maxWidth: 550}} />\n                            </Grid.Row>\n                            <Grid.Row style={{marginTop: 25}}>\n                                Song: {this.state.songData.item.name}\n                            </Grid.Row>\n                            <Grid.Row style={{marginTop: 25}}>\n                                Artist: {this.state.songData.item.artists[0].name}\n                            </Grid.Row>\n                            <Grid.Row style={{marginTop: 25}}>\n                                <Button onClick={this.previousNext} id=\"previous\">Previous</Button>\n                                <Button onClick={this.playPause}  id=\"play\">Play</Button>\n                                <Button onClick={this.playPause}  id=\"pause\">Pause</Button>\n                                <Button onClick={this.previousNext} id=\"next\">Next</Button>\n                            </Grid.Row>\n                        </Grid.Column>\n                        <Grid.Column style={{fontSize: 25, lineHeight: 1.5}}>\n                                <div className=\"preformatted\">{this.state.lyrics}</div>\n                        </Grid.Column>\n                    </Grid>\n                :\n                    null\n                }\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        window.location.hash = ''\n        this.refresh()\n    }\n\n}\n\nexport default Player\n\n","import React, {Component} from 'react'\n\nclass Search extends Component {\n    \n    refresh() {\n        setInterval(\n            function apiCall() { \n                console.log(\"test\"); \n            }, \n            1000\n        )\n    }\n    \n    render() {\n        return(\n            <div>\n                <div>Search</div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.refresh()\n    }\n}\n\nexport default Search","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, NavLink} from 'react-router-dom'\nimport Login from './Login.js'\nimport Player from './Player.js'\nimport Search from './Search.js'\n\nclass Routing extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            accessToken: window.location.hash.substring(14)\n        }\n    }\n    \n    render() {\n        return(\n            <Router>\n                <Route exact path=\"/\" render={() => <Login/>} />\n                <Route exact path=\"/magic-lyrics-frontend\" render={() => <Login/>} />\n                <Route exact path=\"/player\" render={() => <Player accessToken={this.state.accessToken}/>} />\n                <Route exact path=\"/search\" render={() => <Search/>} />\n            </Router>\n        )\n    }\n}\n\nexport default Routing","import React from 'react';\nimport './App.css';\nimport Routing from \"./Components/Routing.js\"\n\nfunction App() {\n  return (\n    <div>\n      <Routing/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}